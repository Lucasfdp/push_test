#!/bin/bash
i_max="$2"
MAX_OP=0
MIN_OP=10000000
OP_ACUM=0
OVERLIMIT_NB=0
if [ $1 = 500 ]; then
	OP_LIMIT=5500
elif [ $1 = 100 ]; then
	OP_LIMIT=700
else
	OP_LIMIT=10000000
fi


echo -e "\nprocessing...\n"
i=0
while [ $i -lt $i_max ];
do
	echo -ne "\r"$((i + 1))"/"$i_max " - "$1 "random numbers"
	if [ "$3" = "--strict" ]; then
		ARG="112 421 230 39 348 158 467 276 85 394 203 12 321 130 439 248 57 366 175 484 293 102 411 220 29 338 147 456 265 74 383 192 1 310 119 428 237 46 355 164 473 282 91 400 209 18 327 136 445 254 63 372 181 490 299 108 417 226 35 344 153 462 390 199 8 317 126 435 244 53 362 171 480 289 98 407 216 25 334 143 452 261 70 379 188 497 306 115 424 233 42 351 160 469 278 87 396 205 14 323 132 441 250 59 368 177 486 295 104 413 222 31 340 149 458 267 76 385 194 122 431 240 49 358 167 476 285 94 403 212 21 330 139 448 257 66 375 184 493 302 111 420 229 38 347 156 465 274 83 392 201 10 319 128 437 246 55 364 173 482 291 309 118 427 236 45 354 163 472 281 90 399 208 17 326 135 444 253 62 371 180 489 298 107 416 225 34 343 152 461 271 80 389 198 7 316 125 434 243 52 361 170 479 288 97 406 215 24 333 142 451 260 69 378 187 496 305 114 423 232 41 350 159 468 277 86 395 204 13 322 131 440 249 58 367 176 485 294 103 412 221 30 339 148 457 266 75 384 193 3 312 121 430 239 48 357 166 475 284 93 402 211 20 329 138 447 256 65 374 183 492 301 110 419 228 37 346 155 464 273 82 391 200 9 318 127 436 245 54 363 172 481 290 99 408 217 26 335 144 453 262 71 380 189 498 307 116 425 235 44 353 162 471 280 89 398 207 16 325 134 443 252 61 370 179 488 297 106 415 224 33 342 151 460 269 78 387 196 5 314 123 432 241 50 359 168 477 286 95 404 213 22 331 140 449 258 67 376 185 494 303 100 409 218 27 336 145 454 263 72 381 190 499 308 117 426 270 79 388 197 6 315 124 433 242 51 360 169 478 287 96 405 214 23 332 141 450 259 68 377 186 495 304 113 422 231 40 349 2 311 120 429 238 47 356 165 474 283 92 401 210 19 328 137 446 255 64 373 182 491 300 109 418 227 36 345 154 463 272 81 234 43 352 161 470 279 88 397 206 15 324 133 442 251 60 369 178 487 296 105 414 223 32 341 150 459 268 77 386 195 4 313 157 466 275 84 393 202 11 320 129 438 247 56 365 174 483 292 101 410 219 28 337 146 455 264 73 382 191 0 "

		# ARG="309  118  427  236  45  354  163  472  281  90  399  208  17  326  135  444  253  62  371  180  489  298  107  416  225  34  343  152  461  271  80  389  198  7  316  125  434  243  52  361  170  479  288  97  406  215  24  333  142  451  260  69  378  187  496  305  114  423  232  41  350  159  468  277  86  395  204  13  322  131  440  249  58  367  176  485  294  103  412  221  30  339  148  457  266  75  384  193  3  312  121  430  239  48  357  166  475  284  93  402  211  20  329  138  447  256  65  374  183  492  301  110  419  228  37  346  155  464  273  82  391  200  9  318  127  436  245  54  363  172  481  290  99  408  217  26  335  144  453  262  71  380  189  498  307  116  425  235  44  353  162  471  280  89  398  207  16  325  134  443  252  61  370  179  488  297  106  415  224  33  342  151  460  269  78  387  196  5  314  123  432  241  50  359  168  477  286  95  404  213  22  331  140  449  258  67  376  185  494  303  112  421  230  39  348  158  467  276  85  394  203  12  321  130  439  248  57  366  175  484  293  102  411  220  29  338  147  456  265  74  383  192  1  310  119  428  237  46  355  164  473  282  91  400  209  18  327  136  445  254  63  372  181  490  299  108  417  226  35  344  153  462  390  199  8  317  126  435  244  53  362  171  480  289  98  407  216  25  334  143  452  261  70  379  188  497  306  115  424  233  42  351  160  469  278  87  396  205  14  323  132  441  250  59  368  177  486  295  104  413  222  31  340  149  458  267  76  385  194  122  431  240  49  358  167  476  285  94  403  212  21  330  139  448  257  66  375  184  493  302  111  420  229  38  347  156  465  274  83  392  201  10  319  128  437  246  55  364  173  482  291  100  409  218  27  336  145  454  263  72  381  190  499  308  117  426  270  79  388  197  6  315  124  433  242  51  360  169  478  287  96  405  214  23  332  141  450  259  68  377  186  495  304  113  422  231  40  349  2  311  120  429  238  47  356  165  474  283  92  401  210  19  328  137  446  255  64  373  182  491  300  109  418  227  36  345  154  463  272  81  234  43  352  161  470  279  88  397  206  15  324  133  442  251  60  369  178  487  296  105  414  223  32  341  150  459  268  77  386  195  4  313  157  466  275  84  393  202  11  320  129  438  247  56  365  174  483  292  101  410  219  28  337  146  455  264  73  382  191  0"
	else 
		ARG=$(seq -250 249 | sort -R | head -n "$1" | tr '\n' ' ')
	fi
	OP=$("../push_swap" $ARG | wc -l)
	if [ $MAX_OP -lt $OP ]; then
		MAX_OP=$OP
		ARG_MAX=$ARG
		if [ $MAX_OP -gt $OP_LIMIT ];then
			OVERLIMIT_NB=$(($OVERLIMIT_NB + 1))
			echo -e $MAX_OP "operations on "$1" ramdom numbers   ("$(date "+%c") ")\n./push_swap "$ARG_MAX " | wc -l\n" >> overlimit_log.txt
		fi
	fi 
	if [ $MIN_OP -gt $OP ]; then
		MIN_OP=$OP
	fi 
	OP_ACUM=$(($OP_ACUM + $OP))
	i=$(($i + 1))
done
echo -ne "\033[1A\033[1A"
echo -e "\r*** completed ***   \n\n"
echo -e "\n\n    Max of operations: "$MAX_OP
echo -e "\n    Min of operations: "$MIN_OP
echo -e "\n    Average:  \t\t"$(($OP_ACUM/$i_max))"\n"
if [[ $1 = 500 || $1 = 100 ]]; then
	echo -e "\n    Number of overlimits (>"$OP_LIMIT"): "$(($OVERLIMIT_NB))"\n"
fi
if [ $OVERLIMIT_NB -ge 1 ];then
	echo -ne "\033[1A\033[1A"
	echo -e "    Number of overlimits (>"$OP_LIMIT"): "$(($OVERLIMIT_NB))"  *** overlimit combinations saved in file overlimit_log.txt ***\n"
fi
